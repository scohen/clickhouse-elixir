defmodule Clickhouse.Settings do
  @setting_types %{
    add_http_cors_header: :bool,
    aggregation_memory_efficient_merge_threads: :uint64,
    allow_ddl: :bool,
    allow_distributed_ddl: :bool,
    allow_experimental_cross_to_join_conversion: :bool,
    allow_experimental_data_skipping_indices: :bool,
    allow_experimental_multiple_joins_emulation: :bool,
    allow_hyperscan: :bool,
    asterisk_left_columns_only: :bool,
    background_pool_size: :uint64,
    background_schedule_pool_size: :uint64,
    calculate_text_stack_trace: :bool,
    cancel_http_readonly_queries_on_client_close: :bool,
    compile: :bool,
    compile_expressions: :bool,
    connect_timeout: :seconds,
    connect_timeout_with_failover_ms: :milliseconds,
    connections_with_failover_max_tries: :uint64,
    count_distinct_implementation: :string,
    date_time_input_format: :datetimeinputformat,
    decimal_check_overflow: :bool,
    distinct_overflow_mode: :overflowmode,
    distributed_aggregation_memory_efficient: :bool,
    distributed_connections_pool_size: :uint64,
    distributed_ddl_task_timeout: :int64,
    distributed_directory_monitor_batch_inserts: :bool,
    distributed_directory_monitor_sleep_time_ms: :milliseconds,
    distributed_group_by_no_merge: :bool,
    distributed_product_mode: :distributedproductmode,
    empty_result_for_aggregation_by_empty_set: :bool,
    enable_debug_queries: :bool,
    enable_http_compression: :bool,
    enable_optimize_predicate_expression: :bool,
    enable_unaligned_array_join: :bool,
    external_table_functions_use_nulls: :bool,
    extremes: :bool,
    fallback_to_stale_replicas_for_distributed_queries: :bool,
    force_index_by_date: :bool,
    force_primary_key: :bool,
    format_csv_allow_double_quotes: :bool,
    format_csv_allow_single_quotes: :bool,
    format_csv_delimiter: :char,
    format_schema: :string,
    fsync_metadata: :bool,
    group_by_overflow_mode: :overflowmodegroupby,
    group_by_two_level_threshold: :uint64,
    group_by_two_level_threshold_bytes: :uint64,
    http_connection_timeout: :seconds,
    http_headers_progress_interval_ms: :uint64,
    http_max_multipart_form_data_size: :uint64,
    http_native_compression_disable_checksumming_on_decompress: :bool,
    http_receive_timeout: :seconds,
    http_send_timeout: :seconds,
    http_zlib_compression_level: :int64,
    input_format_allow_errors_num: :uint64,
    input_format_allow_errors_ratio: :float,
    input_format_defaults_for_omitted_fields: :bool,
    input_format_import_nested_json: :bool,
    input_format_skip_unknown_fields: :bool,
    input_format_values_interpret_expressions: :bool,
    input_format_with_names_use_header: :bool,
    insert_allow_materialized_columns: :bool,
    insert_deduplicate: :bool,
    insert_distributed_sync: :bool,
    insert_distributed_timeout: :uint64,
    insert_quorum: :uint64,
    insert_quorum_timeout: :milliseconds,
    interactive_delay: :uint64,
    join_any_take_last_row: :bool,
    join_default_strictness: :joinstrictness,
    join_overflow_mode: :overflowmode,
    join_use_nulls: :bool,
    load_balancing: :loadbalancing,
    log_profile_events: :bool,
    log_queries: :bool,
    log_queries_cut_to_length: :uint64,
    log_query_settings: :bool,
    log_query_threads: :bool,
    low_cardinality_allow_in_native_format: :bool,
    low_cardinality_max_dictionary_size: :uint64,
    low_cardinality_use_single_dictionary_for_part: :bool,
    mark_cache_min_lifetime: :uint64,
    max_alter_threads: :maxthreads,
    max_ast_depth: :uint64,
    max_ast_elements: :uint64,
    max_block_size: :uint64,
    max_bytes_before_external_group_by: :uint64,
    max_bytes_before_external_sort: :uint64,
    max_bytes_before_remerge_sort: :uint64,
    max_bytes_in_distinct: :uint64,
    max_bytes_in_join: :uint64,
    max_bytes_in_set: :uint64,
    max_bytes_to_read: :uint64,
    max_bytes_to_sort: :uint64,
    max_bytes_to_transfer: :uint64,
    max_columns_to_read: :uint64,
    max_compress_block_size: :uint64,
    max_concurrent_queries_for_user: :uint64,
    max_distributed_connections: :uint64,
    max_execution_speed: :uint64,
    max_execution_speed_bytes: :uint64,
    max_execution_time: :seconds,
    max_expanded_ast_elements: :uint64,
    max_fetch_partition_retries_count: :uint64,
    max_insert_block_size: :uint64,
    max_memory_usage: :uint64,
    max_memory_usage_for_all_queries: :uint64,
    max_memory_usage_for_user: :uint64,
    max_network_bandwidth: :uint64,
    max_network_bandwidth_for_all_users: :uint64,
    max_network_bandwidth_for_user: :uint64,
    max_network_bytes: :uint64,
    max_parallel_replicas: :uint64,
    max_partitions_per_insert_block: :uint64,
    max_pipeline_depth: :uint64,
    max_query_size: :uint64,
    max_read_buffer_size: :uint64,
    max_replica_delay_for_distributed_queries: :uint64,
    max_result_bytes: :uint64,
    max_result_rows: :uint64,
    max_rows_in_distinct: :uint64,
    max_rows_in_join: :uint64,
    max_rows_in_set: :uint64,
    max_rows_to_group_by: :uint64,
    max_rows_to_read: :uint64,
    max_rows_to_sort: :uint64,
    max_rows_to_transfer: :uint64,
    max_streams_to_max_threads_ratio: :float,
    max_subquery_depth: :uint64,
    max_temporary_columns: :uint64,
    max_temporary_non_const_columns: :uint64,
    max_threads: :maxthreads,
    memory_tracker_fault_probability: :float,
    merge_tree_coarse_index_granularity: :uint64,
    merge_tree_max_bytes_to_use_cache: :uint64,
    merge_tree_max_rows_to_use_cache: :uint64,
    merge_tree_min_bytes_for_concurrent_read: :uint64,
    merge_tree_min_bytes_for_seek: :uint64,
    merge_tree_min_rows_for_concurrent_read: :uint64,
    merge_tree_min_rows_for_seek: :uint64,
    merge_tree_uniform_read_distribution: :bool,
    min_bytes_to_use_direct_io: :uint64,
    min_compress_block_size: :uint64,
    min_count_to_compile: :uint64,
    min_count_to_compile_expression: :uint64,
    min_execution_speed: :uint64,
    min_execution_speed_bytes: :uint64,
    min_insert_block_size_bytes: :uint64,
    min_insert_block_size_rows: :uint64,
    mysql_max_rows_to_insert: :uint64,
    network_compression_method: :string,
    network_zstd_compression_level: :int64,
    odbc_max_field_size: :uint64,
    optimize_min_equality_disjunction_chain_length: :uint64,
    optimize_move_to_prewhere: :bool,
    optimize_skip_unused_shards: :bool,
    optimize_throw_if_noop: :bool,
    output_format_json_escape_forward_slashes: :bool,
    output_format_json_quote_64bit_integers: :bool,
    output_format_json_quote_denormals: :bool,
    output_format_parquet_row_group_size: :uint64,
    output_format_pretty_color: :bool,
    output_format_pretty_max_column_pad_width: :uint64,
    output_format_pretty_max_rows: :uint64,
    output_format_write_statistics: :bool,
    parallel_replica_offset: :uint64,
    parallel_replicas_count: :uint64,
    parallel_view_processing: :bool,
    poll_interval: :uint64,
    prefer_localhost_replica: :bool,
    preferred_block_size_bytes: :uint64,
    preferred_max_column_in_block_size_bytes: :uint64,
    priority: :uint64,
    queue_max_wait_ms: :milliseconds,
    read_backoff_max_throughput: :uint64,
    read_backoff_min_events: :uint64,
    read_backoff_min_interval_between_events_ms: :milliseconds,
    read_backoff_min_latency_ms: :milliseconds,
    read_overflow_mode: :overflowmode,
    readonly: :uint64,
    receive_timeout: :seconds,
    replace_running_query: :bool,
    replication_alter_columns_timeout: :uint64,
    replication_alter_partitions_sync: :uint64,
    result_overflow_mode: :overflowmode,
    select_sequential_consistency: :uint64,
    send_logs_level: :logslevel,
    send_progress_in_http_headers: :bool,
    send_timeout: :seconds,
    set_overflow_mode: :overflowmode,
    skip_unavailable_shards: :bool,
    sort_overflow_mode: :overflowmode,
    stream_flush_interval_ms: :milliseconds,
    stream_poll_timeout_ms: :milliseconds,
    table_function_remote_max_addresses: :uint64,
    tcp_keep_alive_timeout: :seconds,
    timeout_before_checking_execution_speed: :seconds,
    timeout_overflow_mode: :overflowmode,
    totals_auto_threshold: :float,
    totals_mode: :totalsmode,
    transfer_overflow_mode: :overflowmode,
    use_client_time_zone: :bool,
    use_index_for_in_with_subqueries: :bool,
    use_uncompressed_cache: :bool
  }
  defstruct Map.keys(@setting_types)

  alias Clickhouse.Binary

  def to_iodata(%__MODULE__{} = settings) do
    settings
    |> Map.from_struct()
    |> Enum.reject(fn {_, v} -> is_nil(v) end)
    |> Enum.map(fn {name, value} -> encode_setting(name, @setting_types[name], value) end)
  end

  defp encode_setting(name, type, value) do
    [
      Binary.encode(:string, to_string(name)),
      encode(type, value)
    ]
  end

  # Note: enum types are sent as strings, see ClickHouse src/Core/SettingsCommon.cpp
  
  defp encode(:bool, false), do: Binary.encode(:varuint, 0)
  defp encode(:bool, true), do: Binary.encode(:varuint, 1)
  defp encode(:char, c) when is_binary(c) and length(c) == 1, do: Binary.encode(:string, c)
  defp encode(:datetimeinputformat, enum), do: Binary.encode(:string, enum)
  defp encode(:distributedproductmode, enum), do: Binary.encode(:string, enum)
  defp encode(:float, f) when is_float(f), do: Binary.encode(:string, to_string(f))
  defp encode(:int64, i) when is_integer(i), do: Binary.encode(:varint, i)
  defp encode(:joinstrictness, enum), do: Binary.encode(:string, enum)
  defp encode(:loadbalancing, enum), do: Binary.encode(:string, enum)
  defp encode(:logslevel, enum), do: Binary.encode(:string, enum)
  defp encode(:maxthreads, n) when is_integer(n) and n >= 0, do: Binary.encode(:varuint, n)
  defp encode(:maxthreads, "auto"), do: Binary.encode(:varuint, 0)
  defp encode(:milliseconds, ms) when is_integer(ms) and ms >= 0, do: Binary.encode(:varuint, ms)
  defp encode(:overflowmode, enum), do: Binary.encode(:string, enum)
  defp encode(:overflowmodegroupby, enum), do: Binary.encode(:string, enum)
  defp encode(:seconds, secs) when is_integer(secs) and secs >= 0, do: Binary.encode(:varuint, secs)
  defp encode(:string, s) when is_binary(s), do: Binary.encode(:string, s)
  defp encode(:totalsmode, enum), do: Binary.encode(:string, enum)
  defp encode(:uint64, n) when is_integer(n) and n >=0, do: Binary.encode(:varuint, n)
end